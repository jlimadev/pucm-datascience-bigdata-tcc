# -*- coding: utf-8 -*-
"""01 - Importações e Análises Exploratórios.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1k5q66lf_OuugGsXoPkIU0SQPl2aZ7zWJ

# Instalação das Dependências
"""

# author: Jonathan Alves de Lima (PUC Minas)

# installing the Yahoo Finance Library
!pip install yfinance --upgrade --no-cache-dir

# ignoring future-warning 
import warnings
warnings.simplefilter(action='ignore', category=FutureWarning)

# importing libraries to the project
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import pandas_datareader.data as web
import yfinance as yf

# importing machine learning libraries
from sklearn.tree import DecisionTreeRegressor
from sklearn.linear_model import LinearRegression
from sklearn.model_selection import train_test_split

# allows pandas_datareader to get yahoo data (returns dataframe)
yf.pdr_override()

# setting style fot pyplot
#plt.style.use('bmh')
plt.style.use('default')

"""# Dataset índice IBOVESPA

## Importação dos Datasets (Somente IBOV)
"""

# setting start and end dates
start_date = "2015-01-01"
end_date = "2020-06-01"

# loading IBOV Index data inside a dataframe
df_ibov = web.get_data_yahoo('^BVSP', start=start_date, end=end_date)

"""## Tratamentos e Análises do dataset IBOV"""

# checking if we have any NaN
df_ibov.isna().sum()

# create a variable with only close price
df_close = df_ibov['Close']
# converting the pandas series to dataframe
df_close = df_close.to_frame()

# visualize the close price data
plt.figure(figsize=(10, 4))
plt.title('IBOV')
plt.xlabel('Days')
plt.ylabel('IBOV Points')
plt.plot(df_close['Close'])
plt.plot(df_close.rolling(window=30).mean()['Close'])  # mean last 30 days
plt.legend(['Close Price', 'Mean'])
plt.show()

# visualize the close price data
plt.figure(figsize=(10, 4))
plt.title('IBOV')
plt.xlabel('Days')
plt.ylabel('IBOV Points')
plt.plot(df_close['Close'])
plt.plot(df_close.rolling(window=90).mean()['Close'])  # mean last 30 days
plt.legend(['Close Price', 'Mean'])
plt.show()

"""#Dataset Ações: ITUB4, B3SA3 e Índice IBOVESPA

## Importando Dataset Ações (IBOV | ITUB4 | B3SA3)
"""

# importing financial stocks data from Yahoo Finance
df_acoes = pd.DataFrame()
tickers = ['ITUB4.SA', 'B3SA3.SA','^BVSP']
for ticker in tickers:
  df_acoes[ticker] = web.get_data_yahoo(ticker, start = start_date, end = end_date)['Close']

# renaming the columns 
df_acoes.rename(columns = {'ITUB4.SA': 'ITUB4', 'B3SA3.SA':'B3SA3', '^BVSP':'IBOV'}, inplace=True)

# normalizing the ibov data (dividing by 1000)
df_acoes['IBOV'] /= 1000

"""## Tratamentos e Análise do Datasets Ações"""

# reseting the index (using only 0 to lenght)
df_acoes.reset_index(inplace = True)

print(df_acoes.isna().sum())

print(df_acoes[df_acoes.isna().any(axis=1)])

# deleting NaN
df_acoes.dropna(inplace=True)

# checking the result
print(df_acoes.isna().sum())

# getting the names of the adjusted tickers
tickers = list(df_acoes.drop(['Date'], axis = 1).columns) # if reset index
#tickers = list((df_acoes.columns)) # if index is not reset
#tickers.remove('Date')
print(tickers)

# ploting the cotations
plt.figure(figsize=(10, 4))
for ticker in tickers:
  plt.plot(df_acoes['Date'], df_acoes[ticker])

plt.legend(tickers, loc='upper left')
plt.title('Cotação ao longo do Tempo', fontsize = 13)
plt.show()

# Médias móveis do IBOV
plt.figure(figsize=(10,5))
plt.plot(df_acoes['Date'], df_acoes['IBOV']*1000, alpha = 0.8)
plt.plot(df_acoes['Date'],df_acoes['IBOV'].rolling(window = 30).mean()*1000)
plt.plot(df_acoes['Date'],df_acoes['IBOV'].rolling(window = 90).mean()*1000)
plt.plot(df_acoes['Date'],df_acoes['IBOV'].rolling(window = 365).mean()*1000)
plt.title('Cotações diárias e médias móveis do IBOV', fontsize = 15)
plt.legend(['Cotação diária','Média móvel mensal','Média móvel trimestral','Média móvel anual'])
plt.show()

# calculating the returns of stocks in the period
returns = pd.DataFrame()
for ticker in tickers:
    returns[ticker] = df_acoes[ticker].pct_change() 
returns['Date'] = df_acoes['Date']
returns.describe()

# pct_change function calculates the percentage change between the current and a prior element.
# pelo std podemos ver que o IBOV foi o menos volátil, enquando o SANB4 apresentou maior variaão no mesmo período
# o retorno diário médio do ITUB4 foi o menor, enquanto a B3 apresentou maior retorno diário

# distribuição normal
for ticker in tickers:
  sns.distplot(returns[ticker].dropna())

plt.legend(tickers)
plt.show()

# utilizando o df_ibov apenas pra fazer a predição do valor de fechamento
df_ibov_ml = df_ibov

# variações
import matplotlib.dates as mdates
import datetime as dt

df_ibov_ml['Variation'] = df_ibov_ml['Close'].sub(df_ibov_ml['Open'])

x = df_ibov_ml.index
y = df_ibov_ml ['Variation']

plt.plot_date(x,y, color='r',fmt="r-")
plt.xticks(rotation=30)

plt.show()

df_ibov_ml.drop(columns=['Variation'], inplace=True) # trabalharemos apenas com uma variável para Close

"""# Dataset COVID-19

## Importação do Dataset COVID-19 do Kaggle
"""

# creating a dataframe
#import io
#covid_file = io.BytesIO(covid_file['covid_brasil.xlsx'])

# testing our file
df_covid_file = pd.read_excel('drive/My Drive/Estudos/PUCMINAS/TCC/covid_brasil.xlsx')
# dataset = pd.read_excel('covid_brasil.xlsx')

"""## Tratamentos e Análises do dataset COVID-19"""

# filtering only Date and number of Cases
df_covid = df_covid_file.filter(['data', 'regiao', 'casosAcumulado'], axis=1)

# Grouping by date and re-converting to data_frame
# df_covid = df_covid.groupby(['data'])['casosAcumulado'].agg('sum').to_frame()

df_covid = df_covid.loc[df_covid['regiao'] == 'Brasil']
df_covid = df_covid.drop('regiao', 1)

# reseting the index
df_covid.reset_index(inplace=True)
df_covid.rename(columns = {'data': 'Date', 'casosAcumulado':'Confirmed Cases'}, inplace=True)

# merge df_acoes with df_covid (left join)
df_merge = df_acoes.merge(df_covid, on='Date', how='left')

# replace the null value with zero
df_merge['Confirmed Cases'] = df_merge['Confirmed Cases'].fillna(0)
print(df_merge)

# replace the null value with zero
df_merge['Confirmed Cases'] = df_merge['Confirmed Cases']
df_merge.drop('index', 1, inplace=True)

# ploting the cotations
plt.figure(figsize=(16, 5))
for ticker in tickers:
  plt.plot(df_merge['Date'], df_merge[ticker])

plt.legend(tickers)
plt.title('Cotação ao longo do Tempo', fontsize = 13)
plt.show()

start_filter = '2020-01-01'
end_filter = '2020-06-01'
filter_2020 = (df_merge['Date']>=start_filter) & (df_merge['Date']<=end_filter)
df_merge_2020 = df_merge[filter_2020]

covid_date = df_merge_2020['Date']
covid_cases = df_merge_2020['Confirmed Cases']

plt.figure(figsize=(10, 5))
plt.plot(df_merge_2020['Date'], df_merge_2020['Confirmed Cases'])

plt.title('Casos de Corona Vírus no Brasil', fontsize = 13)
plt.show()

start_filter = '2020-02-26'
end_filter = '2020-04-30'
filter_2020 = (df_merge['Date']>=start_filter) & (df_merge['Date']<=end_filter)
df_merge_2020 = df_merge[filter_2020]

covid_date = df_merge_2020['Date']
covid_cases = df_merge_2020['Confirmed Cases']

plt.figure(figsize=(15, 5))
plt.plot(df_merge_2020['Date'], df_merge_2020['Confirmed Cases'])

plt.title('Casos de Corona Vírus no Brasil')
plt.show()

"""# Análise dos Datasets em Conjunto e Correlação"""

# Creating the PLOT
fig, ax1 = plt.subplots()
fig.set_figheight(5)
fig.set_figwidth(10)

# setting the x axis
x = df_merge['Date']
# setting the y2 axis
y2 = df_merge['Confirmed Cases']

# setting the y1 axis
for ticker in tickers:
  y1 = df_merge[ticker]
  ax1.plot(x, y1)

# setting the legend
plt.legend(tickers)

ax2 = ax1.twinx()
ax2.plot(x, y2, 'black')

ax1.set_xlabel('Date')
ax1.set_ylabel('Stock Price', color='g')
ax2.set_ylabel('COVID-19 Confirmed Cases', color='black')


plt.title('Bolsa de Valores x Casos Confirmados de COVID-19')
plt.show()

# only 2020
start_filter = '2020-01-01'
end_filter = '2020-06-01'
filter_2020 = (df_merge['Date']>=start_filter) & (df_merge['Date']<=end_filter)
df_merge_2020 = df_merge[filter_2020]
print(df_merge_2020)

# Creating the PLOT
fig, ax1 = plt.subplots()
fig.set_figheight(5)
fig.set_figwidth(10)

# setting the x axis
x = df_merge_2020['Date']
# setting the y2 axis
y2 = df_merge_2020['Confirmed Cases']

# setting the y1 axis
for ticker in tickers:
  y1 = df_merge_2020[ticker]
  ax1.plot(x, y1)

# setting the legend
plt.legend(tickers, loc='upper left')

ax2 = ax1.twinx()
ax2.plot(x, y2, 'black')

ax1.set_xlabel('Date')
ax1.set_ylabel('Stock Price', color='g')
ax2.set_ylabel('COVID-19 Confirmed Cases', color='black')


plt.title('Bolsa de Valores x Casos Confirmados de COVID-19')
plt.show()

# Correlação entre IBOV e Confirmed Cases
start_filter = '2020-01-01'
end_filter = '2020-06-01'
filter_2020 = (df_merge['Date']>=start_filter) & (df_merge['Date']<=end_filter)
df_merge_2020 = df_merge[filter_2020]
df_merge_2020['IBOV'].corr(df_merge_2020['Confirmed Cases'])

# Correlação negativa muito leve entre covid no brasil e queda do ibov quanto mais casos confirmados, mais é reduzido 

-0.3207027309543014

df_merge_2020.corr()

df_merge_2020['IBOV'].corr(df_merge_2020['ITUB4'])

import seaborn as sns
sns.heatmap(df_merge_2020.drop('Date', 1).corr(), annot = True)
plt.show()

# correlacao
df_merge_2020.corr()

# correlação de ibov vs casos confirmados de covid 19 + grafico de dispersão 
figure = plt.figure(figsize=(9,3))
plt.scatter(np.log(df_merge_2020['IBOV']), np.log(df_merge_2020['Confirmed Cases']))
plt.xlabel('IBOV')
plt.ylabel('Confirmed Cases')

# correlação do ibov com B3SA + grafico de dispersão
figure = plt.figure(figsize=(9,3))
plt.scatter((df_merge_2020['IBOV']), (df_merge_2020['ITUB4']))
plt.xlabel('IBOV')
plt.ylabel('ITUB4')

# checking the bigger Close Price
df_desc = df_merge_2020.set_index('Date').drop('ITUB4', 1).drop('B3SA3', 1)
df_desc['IBOV'] = df_desc['IBOV']*1000
print('Máxima no período')
print(df_desc.max())

print('\nDatas de referência')
# Get the Date of the bigger Close Price
print(df_desc.idxmax())

print('Mínima no período')
print(df_desc.min())

print('\nDatas de referência')
# Get the Date of the bigger Close Price
print(df_desc.idxmin())